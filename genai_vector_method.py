import streamlit as st
import pandas as pd
import json
import re
import os
import ast
from pymongo import MongoClient
from datetime import datetime
from langchain.chains import LLMChain
from pymongo import MongoClient
from langchain_community.vectorstores import MongoDBAtlasVectorSearch
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.llms import Ollama
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain

MONGO_URI = "mongodb+srv://mkathijafarshiya:Zahil2020@cluster0.mdkoosr.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
DB_NAME = "product_db"
COL_NAME = "products"

def connect_mongo():
    client = MongoClient(MONGO_URI)          # mongodb connection
    db = client[DB_NAME]
    collection = db[COL_NAME]
    return collection

def run_vector_search(user_question):
    embedding_model = HuggingFaceEmbeddings(model_name='all-MiniLM-L6-v2')

    vector_search = MongoDBAtlasVectorSearch(
                            collection=connect_mongo(),               
                            embedding=embedding_model,                        # vector search using embeddings
                            index_name="products_vector_index",  
                            text_key="description",
                            embedding_key="full_embedding" )
    
    docs = vector_search.similarity_search(user_question,k=3)           # search for the similar vectors in the user question
    context_text = "\n".join([doc.page_content for doc in docs])        # get the similar words 
    return context_text, docs

def load_prompt_template():
    with open("genai_assignment\mongo_prompt_template.txt", "r") as file:      
        return file.read()


def generate_query_with_llm(question, context):
    template_text = load_prompt_template()                             # load the template for the llm model
    llm = Ollama(model = "deepseek-coder:6.7b")                        # the model from ollama
    template = PromptTemplate(
        input_variables=["question", "context"],
        template=template_text
    )
    llmchain = LLMChain(prompt=template, llm=llm)                       # plug in your LLM
    response = llmchain.run(question=question, context=context)
    return response

def clean_response(response_text):
    # Remove code fences
    response_text = re.sub(r"```json", "", response_text)
    response_text = re.sub(r"```", "", response_text)
    response_text = response_text.strip()
    return response_text


def clean_query(response):
    cleaned_text = clean_response(response)

    try:
        parsed_query = json.loads(cleaned_text)
    except json.JSONDecodeError:
        parsed_query = ast.literal_eval(cleaned_text)

    if parsed_query is not None:
        if isinstance(parsed_query, dict):
            filter_block = parsed_query.get("filter", {})

            # --- LaunchDate ---
            if "LaunchDate" in filter_block:
                for op, date_str in filter_block["LaunchDate"].items():
                    if isinstance(date_str, str):
                        filter_block["LaunchDate"][op] = datetime.strptime(date_str, "%Y-%m-%d")

            # --- Discount ---
            if "Discount" in filter_block:
                for op, val in filter_block["Discount"].items():
                    if isinstance(val, str) and "%" in val:
                        filter_block["Discount"][op] = float(val.replace("%", ""))

        # Handle list queries (aggregation pipeline)
        elif isinstance(parsed_query, list):
            for stage in parsed_query:
                if "$match" in stage:
                    match_stage = stage["$match"]

                    # --- LaunchDate ---
                    if "LaunchDate" in match_stage:
                        for op, date_str in match_stage["LaunchDate"].items():
                            if isinstance(date_str, str):
                                match_stage["LaunchDate"][op] = datetime.strptime(date_str, "%Y-%m-%d")

                    # --- Discount ---
                    if "Discount" in match_stage:
                        for op, val in match_stage["Discount"].items():
                            if isinstance(val, str) and "%" in val:
                                match_stage["Discount"][op] = float(val.replace("%", ""))
    return parsed_query

def append_query_to_text(question,parsed_query):
    with open("genai_assignment\Queries_generated.txt", "a", encoding="utf-8") as f:
        f.write(f"Question: {question}\n")
        f.write(f"Query generated by model:\n{parsed_query}\n")
        f.write("-" * 100 + "\n")

def run_mongo_query(parsed_query):
    collection = connect_mongo()
    if parsed_query is not None:
        if isinstance(parsed_query, dict):
            cursor = collection.find(
                parsed_query["filter"],
                parsed_query["projection"]
            )
            if "sort" in parsed_query and parsed_query["sort"]:
                cursor = cursor.sort(list(parsed_query["sort"].items()))
            
            df = pd.DataFrame(list(cursor))
            return df

        elif isinstance(parsed_query, list):
            df = pd.DataFrame(list(collection.aggregate(parsed_query)))

            return df

        else:
            return pd.DataFrame() 

def save_df_to_csv(question, df):
    with open("genai_assignment\saved_results.csv", "a", encoding="utf-8") as f:
        f.write(f"Question: {question}\n")
        f.write(f"\n{df}\n")
        f.write("-" * 100 + "\n")
        
st.set_page_config(
    page_title="Automated Data Query And Retrieval System",  
    layout="wide")

st.title("Automated Data Query And Retrieval System")

st.markdown(
    """
    <style>
        .reportview-container {
            background: #F5F5F5;  /* Light grey background */
        }
        .sidebar .sidebar-content {
            background: #2C3E50;  /* Dark sidebar background */
            color: white;  /* Text color in sidebar */
        }
        h1 {
            color: #E74C3C;  /* Red text for the main title */
        }
        .stTextInput > div > div > input {
            background-color: #E6E6FA;  /* Light lavender for input fields */
            color: #2C3E50;  /* Dark text for input */
        }
    </style>
    """,
    unsafe_allow_html=True
)

tab1, tab2, tab3 = st.tabs(["Ask a question", "Frequently Asked Questions", "Test Cases"])

with tab1:
    st.title("Ask a Question on Products Data")
    user_question = st.text_input("Enter your Qusetion")
    if st.button("Run"):
        context_text, _ = run_vector_search(user_question)
        response_text = generate_query_with_llm(user_question,context_text)
        parsed_query = clean_query(response_text)
        df = run_mongo_query(parsed_query)
        st.dataframe(df)

with tab2:
    st.title("Frequently Asked Questions")
    faqs = ["1. List products launched after Jan 1, 2022",
            "2. Find products with rating above 4.5",
            "3. List products with more than 200 reviews",
            "4. Show products in stock greater than 50", 
            "5. Find products by Nike",
            "6. List products priced between 50 and 150", 
            "7. Top 5 products in Home & Kitchen with highest ratings"]

    selected_question = st.selectbox("Choose a Question", faqs)
    if st.button("Get Answer"):
        context_text, _ = run_vector_search(selected_question)
        response_text = generate_query_with_llm(selected_question,context_text)
        parsed_query = clean_query(response_text)
        df = run_mongo_query(parsed_query)
        st.dataframe(df)

with tab3:
    st.title("Model Test Cases")
    test_cases = {
    "TC1": "Find all products with a rating below 4.5 that have more than 200 reviews and are offered by the brand 'Nike' or 'Sony'.",
    "TC2": "Which products in the Electronics category have a rating of 4.5 or higher and are in stock?",
    "TC3": "List products launched after January 1, 2022, in the Home & Kitchen or Sports categories with a discount of 10% or more, sorted by price in descending order."
    }

    for tc_id, tc_question in test_cases.items():
        with st.expander(f"{tc_id}: {tc_question}"):
            if st.button(f"Run {tc_id}"):
                context_text, _ = run_vector_search(tc_question)
                response_text = generate_query_with_llm(tc_question, context_text)
                parsed_query = clean_query(response_text)
                append_query_to_text(tc_question,parsed_query)
                df = run_mongo_query(parsed_query)

                st.subheader("Output DataFrame")
                st.dataframe(df)
                save_df_to_csv(tc_question, df)

                st.success(f"{tc_id} tested successfully!")
